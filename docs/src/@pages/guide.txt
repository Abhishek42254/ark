
Guide
=====

Ark transforms a source directory of text files written in [Markdown][] or [Syntex][] into a static website that can be viewed locally or served remotely.

[Markdown]: http://daringfireball.net/projects/markdown/
[Syntex]: https://github.com/dmulholland/syntex

:insert toc



Command Line Interface
----------------------

To initialize a new site, create a site directory, `cd` into it, and run the `init` command:

    $ ark init

To build an existing site, run the `build` command from the site directory or any of its subdirectories:

    $ ark build

The build command takes a number of optional arguments:

    --theme <name>  Override the theme specififed in the site's config file.
    --out <path>    Redirect output to the specified directory.
    --clear         Clear the output directory before building.



Site Structure
--------------

Initializing a new site creates the following directory structure:

    site/
        config.py       # site configuration file
        ext/            # extensions directory for plugins
        inc/            # includes directory for menus, etc.
        lib/            # library directory for themes
        out/            # output directory for html files
        src/            # source directory for text files

Ark also creates a hidden `.ark` directory for its own use.



Records
-------

A record is a text file written in [Syntex][] (using the extension `.txt` or `.stx`) or [Markdown][] (using the extension `.md` or `.markdown`). Ark searches the `src` directory for record files and generates an HTML page in the `out` directory for each one it finds. It can also generate a set of index pages for each directory of records, depending on their type.

A record file can begin with a [YAML](http://en.wikipedia.org/wiki/YAML) header specifying metadata for the record:

    ---
    title: My Important Document
    author: John Doe
    date: 2014-07-21
    ...

    Record content begins here.

By default, a record's URL slug is generated from its filename, but you can specify a custom slug in the header:

    ---
    slug: my-custom-slug
    ...

Every record has a *type*, determined by its parent `@type` directory in the site's `src` directory:

    src/
        @pages/
            my-page.txt     # this record is a page
        @posts/
            my-post.txt     # this record is a post

Ark has two builtin record types - *pages* and *posts* - but you can add as many custom types as you like simply by creating new `@type` directories. Every type can have its own individual set of index and tag index pages.

You can determine the behaviour of your custom types (or alter the behaviour of the builtin types) in your site's `config.py` file. Assuming we'll be devoting a section of our site to sonnets, we may wish to create a custom type just for them. We can do this by adding an `@sonnets` directory to our site's `src` directory.

    src/
        @sonnets/
            my-sonnet.txt   # this record is a sonnet

New custom types behave, by default, like the builtin *post* type, but we can alter this behaviour by adding a `types` dictionary to our `config.py` file:

::: python

    types = {
        "sonnets": {               # type id corresponding to the @type directory
            "name": "Sonnets",     # defaults to the titlecased type id
            "slug": "sonnets",     # defaults to the slugified type id
            "tag_slug": "tags",    # defaults to "tags"
            "indexed": True,       # build directory indexes for this type?
            "order_by": "date",    # order index entries by this attribute
            "reverse": True,       # display index entries in reverse order?
            "per_index": 10,       # number of entries per index page
            "per_tag_index": 10,   # number of entries per tag index page
            "homepage": False,     # use this type's index as the site homepage?
        },
    }

All the settings above are in fact defaults, and in practice we would only need to include those we wished to change.

Within an `@type` directory, Ark will preserve any directory structure it finds, so you can use subdirectories to organise your record files by category or date. If the record type is indexed, Ark will generate an individual set of index pages for each subdirectory in the tree.

Note that you can store other files and directories in your site's `src` directory and Ark will copy these files untouched to the `out` directory when it builds your site. Ark only searches directories beginning with an `@` symbol for record files so you can safely store, for example, a `robots.txt` file or a directory of images in your `src` directory.



Record Attributes
-----------------

A record file's metadata keys are converted to lowercase and spaces are replaced by underscores so the YAML attribute:

    ---
    Date of Birth: 1999-09-09
    ...

would be accessible in template files as `record.date_of_birth`.

All records have the following default attributes:

~ date

    A default datetime stamp. If the record has a `date` attribute, this will be used. If not, the file creation time will be used if available (OSX, BSD, Windows), or else the time of the file's last metadata change (Linux).

~ file

    The source filepath.

~ form

    One of: `markdown`, `syntex`.

~ html

    The record's content, rendered into HTML.

~ path

    A list of output-path slugs.

~ slug

    The record's url slug.

~ text

    The record's text content.

~ type

    The record's type ID, determined by its parent `@type` directory.

~ url

    The record's URL.



Tags
----

Every record can be tagged and every record type supports its own individual set of tag index pages. To tag a record, simply add a `tags` attribute to its header followed by a comma-separated list of tags:

    ---
    tags: foo, bar, baz
    ...



Links
-----

Ark generates page-relative URLs and files with a `.html` extension by default, but you can customize this behaviour to suit your needs.

First, you can specify a root URL in your `config.py` file. Use an explicit domain, e.g. `"http://example.com/"`, for absolute URLs, or a single forward slash, `"/"`, for site-relative URLs.

::: python

    root = "http://example.com/"

Second, you can specify a file extension in your `config.py` file. You can choose an arbitrary file extension, e.g. `".html"`, or pass an empty string, `""`, to use no file extension at all. If you specify a single forward slash, `"/"`, Ark will generate directory-style URLs.

::: python

    extension = ".html"

To link to files within your site from records or templates use site-relative URLs prefixed by `@root/`, e.g.

    @root/scripts/jquery.js

Ark will automatically rewrite these URLs in the appropriate format.

Use two trailing slashes when linking to files generated by Ark itself - this tells Ark to rewrite the ending to suit your extension settings.

    @root/posts/my-post//

Note that you should include the `index` slug when linking to directory or tag indexes:

    @root/posts/index//

Linking to the homepage is a special case: a simple `@root/` will always suffice.



Includes
--------

The includes directory, `inc`, is intended for snippets of HTML that can be reused on multiple pages throughout your site, e.g. menus or footer links. Text files placed in this folder will be parsed as Syntex or Markdown depending on their extension and the resulting HTML made available for inclusion in theme files via the `includes.<filename>` attribute.

For example, a simple menu can be constructed in either Syntex or Markdown using nested lists:

    * [Home](@root/)
    * [About](@root/about//)
    * [Posts](@root/posts/index//)
        * [2015](@root/posts/2015/index//)
        * [2014](@root/posts/2014/index//)

If the menu above was contained in a file named `menu.txt` then the rendered HTML would be available to themes via the `includes.menu` attribute.



Extensions
----------

The extensions directory, `ext`, is intended for plugins that extend or enhance Ark's functionality. Python modules placed in this directory will be loaded automatically and can make use of Ark's system of event and filter hooks to inject their own code into the build process.

As a simple example, the code below registers a handler on the `exit` event hook to report the number of HTML pages Ark has generated:

::: python

    from ark import hooks, site

    @hooks.register('exit')
    def print_page_count():
        print('Page count:', site.page_count())

See the sample plugins bundled with the skeleton site for more examples of extensions in action.



Markdown Options
----------------

Ark uses the [Python Markdown][mddocs] package to render Markdown files. You can make use of its optional features and extensions by including a dictionary of keyword arguments for the renderer in your site configuration file.

For example, to turn on the 'Markdown Extra' extension, add the following dictionary to your `config.py` file:

::: python

    markdown = {
        'extensions': ['markdown.extensions.extra'],
    }

See the package's [documentation][mddocs] for further details.

[mddocs]: https://pythonhosted.org/Markdown/
